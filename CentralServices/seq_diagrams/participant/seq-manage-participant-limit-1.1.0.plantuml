@startuml
' declare title
title 2.06 Design an API to manage NET DEBIT CAP #330

autonumber

' declare actors
actor "HUB OPERATOR" as OPERATOR
boundary "Central Service API" as CSAPI
control "Participant Handler" as PARTICIPANT_HANDLER
entity "Central Service API" as CSAPI
entity "Participant DAO" as PARTICIPANT_DAO
database "Central Store" as DB

box "Central Services" #LightYellow
participant PARTICIPANT_HANDLER
participant PARTICIPANT_DAO
participant DB
end box

' start flow

activate OPERATOR
group Manage Net Debit Cap
    OPERATOR -> CSAPI: Request to adjust ParticipantLimit for a certain Currency - POST - /participants/{name}/limits
    note right of OPERATOR #yellow
        Message:
        {
            payload: {
                currency: <string>,
                limit: {
                    type: <string>,
                    value: <Id>
                }
            }
        }
    end note

    activate CSAPI
    CSAPI -> PARTICIPANT_HANDLER: Adjust Limit for Participant
    activate PARTICIPANT_HANDLER
    PARTICIPANT_HANDLER ->PARTICIPANT_DAO: Fetch Participant/currency \n<color #FF0000><b>Error code:</b> 3200</color>
    activate PARTICIPANT_DAO
    PARTICIPANT_DAO -> DB: Fetch Participant/currency
    activate DB
    hnote over DB #lightyellow
        participant
        participantCurrency
    end note
    DB --> PARTICIPANT_DAO: Retrieved Participant/currency
    deactivate DB
    PARTICIPANT_DAO --> PARTICIPANT_HANDLER: Return Participant/currency
    deactivate PARTICIPANT_DAO
    PARTICIPANT_HANDLER -> PARTICIPANT_HANDLER: Validate DFSP
    alt Validate participant (success)
                PARTICIPANT_HANDLER ->PARTICIPANT_DAO:  (for ParticipantCurrency) Fetch ParticipantLimit \n<color #FF0000><b>Error code:</b> 3200</color>
                activate PARTICIPANT_DAO
                PARTICIPANT_DAO -> DB: Fetch ParticipantLimit
                activate DB
                hnote over DB #lightyellow
                    participantLimit
                end note
                DB --> PARTICIPANT_DAO: Retrieved ParticipantLimit
                deactivate DB
                PARTICIPANT_DAO --> PARTICIPANT_HANDLER: Return ParticipantLimit
                deactivate PARTICIPANT_DAO
                PARTICIPANT_HANDLER -> PARTICIPANT_HANDLER: Validate ParticipantLimit
                alt Validate participantLimit (success)
                    Group DB TRANSACTION IMPLEMENTATION - Lock on ParticipantLimit table with UPDATE
                    note right of PARTICIPANT_DAO #lightgrey
                        If (record exists && isActive = 1)
                            oldIsActive.isActive = 0
                            insert Record
                        Else
                            insert Record
                        End

                    end note

                    PARTICIPANT_HANDLER ->PARTICIPANT_DAO:  (for ParticipantLimit) Insert new ParticipantLimit \n<color #FF0000><b>Error code:</b> 3200</color>

                    activate PARTICIPANT_DAO

                    PARTICIPANT_DAO -> DB: Insert ParticipantLimit
                    activate DB
                    hnote over DB #lightyellow
                        participantLimit
                    end note
                    DB --> PARTICIPANT_DAO: Inserted ParticipantLimit
                    deactivate DB
                    PARTICIPANT_DAO --> PARTICIPANT_HANDLER: Return ParticipantLimit


                    deactivate PARTICIPANT_DAO
            ' Release Lock on ParticipantLimit table
                End

         else Validate participantLimit (failure)
                    note right of PARTICIPANT_HANDLER #red: Validation failure!

                    note right of PARTICIPANT_HANDLER #yellow
                        Message:
                            {
                                "errorInformation": {
                                    "errorCode": 3200,
                                    "errorDescription": "ParticipantLimit Not Found",
                                }
                            }
                    end note
                end
            PARTICIPANT_HANDLER --> CSAPI: Return new Limit values and status 200
                note right of PARTICIPANT_HANDLER #yellow
                    Message:
                    {
                        "currency": "EUR",
                        "limit": {
                            "participantLimitId": <number>,
                            "participantLimitTypeId": <number>,
                            "type": <string>,
                            "value": <string>,
                            "isActive": 1
                        }
                    }
                end note
            CSAPI --> OPERATOR: Return new Limit values and status 200

    else Validate participant (failure)
        note right of PARTICIPANT_HANDLER #red: Validation failure!

        note right of PARTICIPANT_HANDLER #yellow
            Message:
                {
                    "errorInformation": {
                        "errorCode": 3200,
                        "errorDescription": "FSP id Not Found",
                    }
                }
        end note

    end
        PARTICIPANT_HANDLER -->CSAPI: Return <color #FF0000><b>Error code:</b> 3200</color>
        deactivate PARTICIPANT_HANDLER
        CSAPI -->OPERATOR: Return <color #FF0000><b>Error code:</b> 3200</color>

    deactivate PARTICIPANT_HANDLER
    deactivate CSAPI
    deactivate OPERATOR
end
@enduml
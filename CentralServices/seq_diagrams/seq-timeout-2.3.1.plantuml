@startuml
' declate title
title 2.3.1. Timeout Handler Consume

autonumber

' Actor Keys:
'   boundary - APIs/Interfaces, etc
'   collections - Kafka Topics
'   control - Kafka Consumers
'   entity - Database Access Objects
'   database - Database Persistance Store

' declare actors
control "Transfer Timeout Handler" as EXP_HANDLER
collections "Topic-{currency}-DFSPn-Position-Abort" as TOPIC_POSITION_DFSP
collections "Notification-Topic" as TOPIC_NOTIFICATIONS
collections "Event-Topic" as TOPIC_EVENT
entity "Transfer DAO" as TRANS_DAO
entity "Position DAO" as POS_DAO
database "Central Store" as DB

box "Central Service" #LightYellow
    participant EXP_HANDLER
    participant TOPIC_POSITION_DFSP
    participant TOPIC_NOTIFICATIONS
    participant TOPIC_EVENT
    participant TRANS_DAO
    participant POS_DAO
    participant DB
end box

' start flow
activate EXP_HANDLER
group Timeout Handler Consume
    group Persist Event Information
        EXP_HANDLER -> TOPIC_EVENT: Publish event information
        ref over EXP_HANDLER, TOPIC_EVENT :  Event Handler Consume {9.1.0.}
    end

    group Request expired transfers
        EXP_HANDLER -> TRANS_DAO: Request all expired transfers (Date.now() > expirationDate) \nwith transferState IN ['RECEIVED_PREPARE', 'RESERVED']\n<color #FF0000><b>Error codes:</b> 2003, 3208</color>
        activate TRANS_DAO
        TRANS_DAO -> DB: Fetch from database
        activate DB
        DB --> TRANS_DAO
        deactivate DB
        hnote over DB #lightyellow
            transfer
            transferStateChange
        end note
        EXP_HANDLER <-- TRANS_DAO: Return list of all transfers to be aborted
        deactivate TRANS_DAO
    end

    loop for each transfer in the list
        |||
        alt transferState == 'RECEIVED_PREPARE'
            group
                EXP_HANDLER -> POS_DAO: Request to persist latest state to DB\n<color #FF0000><b>Error code:</b> 2003</color>
                POS_DAO -> DB: Persist state change
                hnote over DB #lightyellow
                        INSERT **transferStateChange**
                        SET transferStateId = 'ABORTED'
                end note
                activate DB
                deactivate DB
                POS_DAO --> EXP_HANDLER: Return success
            end
            note right of EXP_HANDLER #yellow
                Message:
                {
                    id: <transferId>,
                    from: <payerParticipantId>,
                    to: <payeeParticipantId>,
                    type: application/json,
                    <color #FF0000>content: {</color>
                        <color #FF0000>headers: <transferHeaders>,</color>
                        payload: {
                             "errorInformation": {
                                 "errorCode": 3303,
                                 "errorDescription": "Client requested to use a transfer that has already expired.",
                                 "extensionList": <transferMessage.extensionList>
                             }
                        }
                    <color #FF0000>},</color>
                    metadata: {
                        event: {
                            id: <uuid>,
                            type: position,
                            action: timeout-received,
                            createdAt: <timestamp>,
                            state: {
                                status: 'error',
                                code: <errorInformation.errorCode>
                                description: <errorInformation.errorDescription>
                            }
                        }
                    }
                }
            end note
            EXP_HANDLER -> TOPIC_NOTIFICATIONS: Publish to Notification event
            activate TOPIC_NOTIFICATIONS
            deactivate TOPIC_NOTIFICATIONS
        else transferState == 'RESERVED'
            note right of EXP_HANDLER #yellow
                Message:
                {
                    id: <transferId>,
                    from: <payerParticipantId>,
                    to: <payeeParticipantId>,
                    type: application/json,
                    <color #FF0000>content: {</color>
                        <color #FF0000>headers: <transferHeaders>,</color>
                        <color #FF0000>payload: <transferMessage></color>
                    <color #FF0000>},</color>
                    metadata: {
                        event: {
                            id: <uuid>,
                            type: position,
                            action: timeout-reserved,
                            createdAt: <timestamp>,
                            state: {
                                status: "success",
                                code: 0
                            }
                        }
                    }
                }
            end note
            EXP_HANDLER -> TOPIC_POSITION_DFSP: Route & Publish Position event
            activate TOPIC_POSITION_DFSP
            deactivate TOPIC_POSITION_DFSP
        end

    end
end
@enduml
